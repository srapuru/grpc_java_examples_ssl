package nl.altindag.grpc.client;

import io.grpc.Channel;
import io.grpc.ManagedChannel;
import io.grpc.netty.GrpcSslContexts;
import io.grpc.netty.NettyChannelBuilder;
import io.netty.handler.ssl.SslContext;
import nl.altindag.grpc.HelloRequest;
import nl.altindag.grpc.HelloResponse;
import nl.altindag.grpc.HelloServiceGrpc;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.net.ssl.SSLException;
import java.io.File;

public class App {

    private static final Logger LOGGER = LoggerFactory.getLogger(App.class);

    private final HelloServiceGrpc.HelloServiceBlockingStub stub;

    public App(Channel channel) {
        stub = HelloServiceGrpc.newBlockingStub(channel);
    }

    public void hello(String name) {
        LOGGER.info("Will try to greet the server as {} ...", name);

        HelloRequest request = HelloRequest.newBuilder().setName(name).build();
        HelloResponse response = stub.hello(request);

        LOGGER.info("Server response: {}", response.getMessage());
    }

    public static SslContext loadTLSCredentials() throws SSLException {
        File serverCACertFile = new File("/Users/PANKAJ_DOLLY/GRPC/java-tutorials/grpc-client-server-with-ssl/cert/ca-cert.pem");
        File clientCertFile = new File(  "/Users/PANKAJ_DOLLY/GRPC/java-tutorials/grpc-client-server-with-ssl/cert/client-cert.pem");
        File clientKeyFile = new File(   "/Users/PANKAJ_DOLLY/GRPC/java-tutorials/grpc-client-server-with-ssl/cert/client-key.pem");

        return GrpcSslContexts.forClient()
                .keyManager(clientCertFile, clientKeyFile)
                .trustManager(serverCACertFile)
                .build();
    }


    public static void main(String[] args) throws SSLException {
//        SSLFactory sslFactory = SSLFactory.builder()
//                .withIdentityMaterial("client/identity.jks", "secret".toCharArray())
//                .withTrustMaterial("client/truststore.jks", "secret".toCharArray())
//                .withDefaultTrustMaterial()
//                .build();

        SslContext sslContext = App.loadTLSCredentials();

        ManagedChannel channel = NettyChannelBuilder.forAddress("0.0.0.0", 8080)
                .sslContext(sslContext)
                .build();

        App app = new App(channel);
        app.hello("John");

        channel.shutdown();
    }

}
